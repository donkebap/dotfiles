" General settings {{{
set nocompatible
syntax on
filetype plugin indent on
" }}}

"  Behavior Modification ----------------------  {{{

set history=200
set ruler
set showcmd
set incsearch
set laststatus=2
set ignorecase
set smartcase
set magic
set noshowmode
set foldmethod=manual
set mouse=a
set iskeyword+=-

set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set shiftround
set termguicolors
set hidden

set textwidth=80
set nowrap

set ttyfast
set lazyredraw

set visualbell

" wildmenu
set wildmenu
set wildmode=list:longest,list:full

" Line numbers
set number
set numberwidth=1
set relativenumber

" undo/backup files
set backupdir=~/.vim/tmp,.
set directory=~/.vim/tmp,.

" persistent undo
if has('persistent_undo')
    set undofile
    set undodir=~/.vim/tmp,.
endif

" Open new split panes to right and bottom
set splitbelow
set splitright

" Always use vertical diffs
set diffopt+=vertical

" highlight fenced code blocks in markdown
let g:markdown_fenced_languages = [
            \ 'html',
            \ 'vim',
            \ 'js=javascript',
            \ 'json',
            \ 'python',
            \ 'sql',
            \ 'bash=sh'
            \ ]

" enable folding in bash files
let g:sh_fold_enabled=1
" }}}

"  Plugin Modifications (BEFORE loading bundles) ----- {{{

" ====================================
" VimMatchUp:
" ====================================
let g:matchup_matchparen_deferred = 1

" ====================================
" WinResizer:
" ====================================
nnoremap <C-w>r :WinResizerStartResize<CR>

" ====================================
" UndoTree:
" ===================================
nnoremap <silent> <leader>ut :UndotreeToggle<CR>

" ====================================
" Deoplete:
" ====================================

let g:deoplete#enable_at_startup = 1
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ deoplete#mappings#manual_complete()

function! s:check_back_space() abort
    let l:col = col('.') - 1
    return !l:col || getline('.')[l:col - 1]  =~? '\s'
endfunction

autocmd VimEnter * call deoplete#custom#var('omni', 'input_patterns', {
      \ 'css': '^\s\+\w\+\|\w\+[):;]\?\s\+\w*\|[@!]',
      \ 'scss': '^\s\+\w\+\|\w\+[):;]\?\s\+\w*\|[@!]',
      \ 'javascript.jsx': '^\s\+\w\+\|\w\+[):;]\?\s\+\w*\|[@!]'
      \})

" ====================================
" Vim multiple cursors + DEOPLETE:
" ====================================
augroup VimMultiCursors
    autocmd!
    autocmd User MultipleCursorsPre let g:deoplete#disable_auto_complete=1
    autocmd User MultipleCursorsPost let g:deoplete#disable_auto_complete=0
augroup END


" ====================================
" Neosnippet:
" ====================================

let g:neosnippet#enable_completed_snippet = 1

" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB>
            \ pumvisible() ? "\<C-n>" :
            \ neosnippet#expandable_or_jumpable() ?
            \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"


let g:neosnippet#enable_snipmate_compatibility = 1


" ====================================
" LanguageClient-neovim:
" ====================================
let g:LanguageClient_serverCommands = {
            \ 'rust': ['rls'],
            \ 'javascript.jsx': ['javascript-typescript-stdio'],
            \ 'typescript.tsx': ['javascript-typescript-stdio'],
            \ }

let g:LanguageClient_hasSnippetSupport = 0

nnoremap <leader>; :call LanguageClient_contextMenu()<CR>

" ====================================
" GitGutter:
" ====================================
nnoremap <silent> + :GitGutterNextHunk<cr>
nnoremap <silent> _ :GitGutterPrevHunk<cr>

" ====================================
" SplitJoin:
" ====================================
let g:splitjoin_align = 1
let g:splitjoin_trailing_comma = 1

" ====================================
" MatchTagAlways:
" ====================================
let g:mta_filetypes = {
            \ 'xhtml': 1,
            \ 'xml': 1,
            \ 'html': 1,
            \ 'javascript.jsx': 1,
            \ }

" ====================================
" Snippets (UltiSnips):
" ====================================
let g:UltiSnipsExpandTrigger="<NUL>"
let g:UltiSnipsListSnippets="<NUL>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" :UltiSnipsEdit opens in a vertical split
let g:UltiSnipsEditSplit                   = 'vertical'
let g:UltiSnipsSnippetsDir                 = $HOME . '/dotfiles/vim/UltiSnips'

" ====================================
" indentLine
" ====================================
let g:indentLine_fileType = [
            \ 'java',
            \ 'javascript',
            \ 'javascript.jsx',
            \ 'html',
            \ 'vim',
            \ 'yml'
            \ ]

let g:indentLine_char = '│'
let g:indentLine_color_term = 238
let g:indentLine_color_gui = '#454C5A'

" ====================================
" setup airline
" ====================================
let g:airline_theme='base16_vim'
let g:airline#extensions#branch#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_mode_map = {
            \ '__' : '-',
            \ 'n'  : 'N',
            \ 'i'  : 'I',
            \ 'R'  : 'R',
            \ 'c'  : 'C',
            \ 'v'  : 'V',
            \ 'V'  : 'V',
            \ '' : 'V',
            \ 's'  : 'S',
            \ 'S'  : 'S',
            \ '' : 'S',
            \ }

" ====================================
" Bullets.vim:
" ====================================
let g:bullets_enabled_file_types = [
            \ 'markdown',
            \ 'text',
            \ 'gitcommit',
            \ 'scratch'
            \]

" =====================================
"  FZF
" =====================================
" set fzf's default input to ripgrep instead of find. This also removes gitignore etc
let $FZF_DEFAULT_COMMAND = 'rg --files --hidden'
let $FZF_DEFAULT_OPTS='--ansi'
let g:fzf_files_options = '--preview "(bat --color \"always\" --line-range 0:100 {} || head -'.&lines.' {})"'

function! FZFOpen(command_str)
    if (expand('%') =~# 'NERD_tree' && winnr('$') > 1)
        exe "normal! \<c-w>\<c-w>"
    endif
    exe 'normal! ' . a:command_str . "\<cr>"
endfunction

command! -bang -nargs=* FzfRg
            \ call fzf#vim#grep(
            \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
            \   <bang>0 ? fzf#vim#with_preview('up:60%')
            \           : fzf#vim#with_preview('right:50%:hidden', '?'),
            \   <bang>0)

nnoremap <silent> <C-b> :call FZFOpen(':Buffers')<CR>
nnoremap <silent> <C-g>g :call FZFOpen(':FzfRg!')<CR>
nnoremap <silent> <C-g>c :call FZFOpen(':Commands')<CR>
nnoremap <silent> <C-g>l :call FZFOpen(':BLines')<CR>
nnoremap <silent> <C-p> :call FZFOpen(':Files')<CR>
nnoremap <silent> <C-h> :call FZFOpen(':History')<CR>

imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" ======================================
" FZF + DevIcons
" ======================================

" Files + devicons
function! Fzf_dev()
    let l:fzf_files_options = '--preview "rougify {2..-1} | head -'.&lines.'"'

    function! s:files()
        let l:files = split(system($FZF_DEFAULT_COMMAND), '\n')
        return s:prepend_icon(l:files)
    endfunction

    function! s:prepend_icon(candidates)
        let l:result = []
        for l:candidate in a:candidates
            let l:filename = fnamemodify(l:candidate, ':p:t')
            let l:icon = WebDevIconsGetFileTypeSymbol(l:filename, isdirectory(l:filename))
            call add(l:result, printf('%s %s', l:icon, l:candidate))
        endfor

        return l:result
    endfunction

    function! s:edit_file(item)
        let l:pos = stridx(a:item, ' ')
        let l:file_path = a:item[pos+1:-1]
        " TODO: not working
        let l:cmd = get({
                    \ 'ctrl-x': 'split',
                    \ 'ctrl-v': 'vertical split',
                    \ 'ctrl-t': 'tabe'
                    \ }, a:item[0], 'e')
        execute 'silent ' . l:cmd . ' ' . l:file_path
    endfunction

    call fzf#run({
                \ 'source': <sid>files(),
                \ 'sink':   function('s:edit_file'),
                \ 'options': '-m --expect=ctrl-t,ctrl-v,ctrl-x '.
                \            l:fzf_files_options,
                \ 'down':    '40%' })
endfunction


" =====================================
"  JSX
" =====================================

" Allow JSX in normal JS files
let g:jsx_ext_required = 0

" ----------------------------------------------------------------------------
" Scratch.vim
" ----------------------------------------------------------------------------
let g:scratch_no_mappings=1

nnoremap <leader>sc :Scratch<CR>

augroup ScratchToggle
    autocmd!
    autocmd FileType scratch nnoremap <buffer> <leader>sc :q<CR>
augroup END

" ----------------------------------------------------------------------------
" Emmet
" ----------------------------------------------------------------------------
" better emmet leader key (must be followed with ,)
let g:user_emmet_leader_key='<C-e>'

" ----------------------------------------------------------------------------
" Switch.vim
" ----------------------------------------------------------------------------
let g:switch_custom_definitions =
            \ [
            \   ['up', 'down', 'change'],
            \   ['add', 'drop', 'remove'],
            \   ['create', 'drop'],
            \   ['row', 'column'],
            \   ['first', 'second', 'third', 'fourth', 'fifth'],
            \ ]


" ----------------------------------------------------------------------------
" Vim Flow JS
" ----------------------------------------------------------------------------
let g:flow#autoclose = 1

" ----------------------------------------------------------------------------
" ALE
" ----------------------------------------------------------------------------
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_error = ''
let g:ale_sign_warning = ''
highlight link ALEWarningSign Directory
highlight link ALEErrorSign WarningMsg
nnoremap <silent> <leader>ne :ALENextWrap<CR>
nnoremap <silent> <leader>pe :ALEPreviousWrap<CR>

let g:ale_fixers = {
            \   'javascript': ['prettier', 'eslint'],
            \   'javascript.jsx': ['prettier', 'eslint'],
            \   'typescript': ['prettier'],
            \   'typescript.tsx': ['prettier'],
            \   'json': ['prettier'],
            \   'scss': ['prettier'],
            \   'bash': ['shfmt'],
            \   'zsh': ['shfmt'],
            \   'rust': ['rustfmt']
            \}

let g:ale_sh_shfmt_options = '-i 2 -ci'
let g:ale_javascript_prettier_options = '--tab-width 2 --trailing-comma --single-quote'

let g:ale_fix_on_save = 1

" ----------------------------------------------------------------------------
" Startify
" ----------------------------------------------------------------------------
let g:startify_files_number = 5

" ----------------------------------------------------------------------------
" NERDTree
" ----------------------------------------------------------------------------
let g:NERDTreeIgnore = [
            \ '\.vim$',
            \ '\~$',
            \ 'deps',
            \ '_build',
            \ '.git',
            \ 'node_modules',
            \ 'tags',
            \ ]

let g:NERDTreeShowHidden = 1
let g:NERDTreeAutoDeleteBuffer=1
" keep alternate files and jumps
let g:NERDTreeCreatePrefix='silent keepalt keepjumps'

nnoremap <Leader>nt :NERDTreeToggle<CR>

" not necessarily NTree related but uses NERDTree because I have it setup
nnoremap <leader>d :e %:h<CR>

augroup NERDTreeAuCmds
    autocmd!
    autocmd FileType nerdtree nmap <buffer> <expr> - g:NERDTreeMapUpdir
augroup END
" move up a directory with "-" like using vim-vinegar (usually "u" does that)

" ----------------------------------------------------------------------------
" WebDevIcons
" ----------------------------------------------------------------------------
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:webdevicons_enable_airline_statusline = 1
let g:webdevicons_enable_airline_tabline = 1
let g:WebDevIconsOS = 'Unix'
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['js'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['jsx'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['vim'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['yaml'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['yml'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['svg'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['json'] = ''

let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {} " needed
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.*vimrc.*'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['.keep'] = ''
let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols['package.json'] = ''

" Useful alternatives:           

" after a re-source, fix syntax matching issues (concealing brackets):
if exists('g:loaded_webdevicons')
    call webdevicons#refresh()
endif

" ----------------------------------------------------------------------------
"  vim-nerdtree-syntax-highlight:
" ----------------------------------------------------------------------------
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeExtensionHighlightColor = {}
let g:NERDTreeExtensionHighlightColor['yml'] = 'f4bf70'
let g:NERDTreeExtensionHighlightColor['yaml'] = 'f4bf70'


" ----------------------------------------------------------------------------
" vim-go
" ----------------------------------------------------------------------------
augroup CustomGoVimMappings
    autocmd!
    autocmd FileType go setlocal nolist listchars=tab:>-,trail:·,nbsp:·
    autocmd FileType go nmap <buffer> <leader>r <Plug>(go-run)
    autocmd FileType go nmap <buffer> <leader>b <Plug>(go-build)
    autocmd FileType go nmap <buffer> <leader>t <Plug>(go-test)
    autocmd FileType go nmap <buffer> <leader>c <Plug>(go-coverage)
    autocmd Filetype go
                \  command! -bang A call go#alternate#Switch(<bang>0, 'edit')
                \| command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
                \| command! -bang AS call go#alternate#Switch(<bang>0, 'split')
augroup END

let g:go_fmt_autosave = 1
let g:go_term_mode = 'vsplit'
let g:go_fmt_command='goimports'


" ----------------------------------------------------- }}}

" Load all plugins ------------------------------- {{{
if filereadable(expand('~/.vimrc.bundles'))
    source ~/.vimrc.bundles
endif
" }}}

"  Plugin Modifications (AFTER loading bundles) ----- {{{
if has('nvim') && !exists('$TMUX')
" ------------------------------------
" NVIMUX:
" ------------------------------------

lua << EOF
local nvimux = require('nvimux')

-- Nvimux configuration
nvimux.config.set_all{
  prefix = '<C-z>',
  open_term_by_default = true,
  new_window_buffer = 'single',
  quickterm_direction = 'botright',
  quickterm_orientation = 'vertical',
  -- Use 'g' for global quickterm
  quickterm_scope = 't',
  quickterm_size = '80',
}

-- Nvimux custom bindings
nvimux.bindings.bind_all{
  {'s', ':NvimuxHorizontalSplit', {'n', 'v', 'i', 't'}},
  {'v', ':NvimuxVerticalSplit', {'n', 'v', 'i', 't'}},
}

-- Required so nvimux sets the mappings correctly
nvimux.bootstrap()
EOF
endif
" }}}

" Auto commands ------------------------------------------------- {{{
augroup vimrcEx
    autocmd!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it for commit messages, when the position is invalid, or when
    " inside an event handler (happens when dropping a file on gvim).
    autocmd BufReadPost *
                \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif

    " Set syntax highlighting for specific file types
    autocmd BufRead,BufNewFile .babelrc set filetype=json
    autocmd BufRead,BufNewFile *.md set filetype=markdown
    autocmd BufRead,BufNewFile .eslintrc,.prettierrc set filetype=json

    " Enable spellchecking for Markdown
    autocmd FileType markdown setlocal spell

    " Automatically wrap at 80 characters for Markdown
    autocmd BufRead,BufNewFile *.md setlocal textwidth=80

    " Automatically wrap at 72 characters and spell check git commit messages
    autocmd FileType gitcommit setlocal textwidth=72
    autocmd FileType gitcommit setlocal spell

    " Allow stylesheets to autocomplete hyphenated words
    autocmd FileType css,scss,sass setlocal iskeyword+=-

augroup END
" }}}

" Vim Script file settings ------------------------ {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}

"  Key Mappings -------------------------------------------------- {{{

" open FZF in current file's directory
nnoremap <silent> <Leader>_ :Files <C-R>=expand('%:h')<CR><CR>

" fold file based on syntax
nnoremap <silent> <leader>zs :setlocal foldmethod=syntax<CR>

" remove highlighting on escape
map <silent> <esc> :nohlsearch<cr>

" Pasting support
set pastetoggle=<F2>  " Press F2 in insert mode to preserve tabs when
" pasting from clipboard into terminal

" Source (reload) your vimrc. Type space, s, o in sequence to trigger
nnoremap <leader>so :source ~/.vimrc<cr>

" VimPlug:
nnoremap <leader>pi :PlugInstall<CR>
nnoremap <leader>pu :PlugUpdate<CR>
nnoremap <leader>pc :PlugClean<CR>

" disable arrow keys in normal mode
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" --------------------- Key Mappings ---------------------------- }}}

" For NeoVim ----------------------------------------------------- {{{
if has('nvim')
    " set cursor modes
    set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
                \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
                \,sm:block-blinkwait175-blinkoff150-blinkon175

    " interactive find replace preview
    set inccommand=nosplit

    " Navigate neovim + neovim terminal emulator with alt+direction
    tnoremap <c-h> <C-\><C-n><C-w>h
    tnoremap <c-j> <C-\><C-n><C-w>j
    tnoremap <c-k> <C-\><C-n><C-w>k
    tnoremap <c-l> <C-\><C-n><C-w>l
endif
" }}}

" For VimPlug {{{
function! PlugGx()
    let l:line = getline('.')
    let l:sha  = matchstr(l:line, '^  \X*\zs\x\{7,9}\ze ')

    if (&filetype ==# 'vim-plug')
        " inside vim plug splits such as :PlugStatus
        let l:name = empty(l:sha)
                    \ ? matchstr(l:line, '^[-x+] \zs[^:]\+\ze:')
                    \ : getline(search('^- .*:$', 'bn'))[2:-2]
    else
        " in .vimrc.bundles
        let l:name = matchlist(l:line, '\v/([A-Za-z0-9\-_\.]+)')[1]
    endif

    let l:uri  = get(get(g:plugs, l:name, {}), 'uri', '')
    if l:uri !~? 'github.com'
        return
    endif
    let l:repo = matchstr(l:uri, '[^:/]*/'.l:name)
    let l:url  = empty(l:sha)
                \ ? 'https://github.com/'.l:repo
                \ : printf('https://github.com/%s/commit/%s', l:repo, l:sha)
    call netrw#BrowseX(l:url, 0)
endfunction

augroup PlugGxGroup
    autocmd!
    autocmd BufRead,BufNewFile .vimrc.bundles nnoremap <buffer> <silent> gx :call PlugGx()<cr>
    autocmd FileType vim-plug nnoremap <buffer> <silent> gx :call PlugGx()<cr>
augroup END
" }}}

